// <auto-generated />
using System;
using Delivery.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Delivery.Infrastructure.Migrations.AppDb
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Delivery.Domain.DetallePedidos.DetallePedido", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<int?>("Cantidad")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<Guid?>("PedidoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductoId")
                        .HasColumnType("uuid");

                    b.Property<double?>("SubTotal")
                        .IsRequired()
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("detalles_pedidos", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Direcciones.Direccion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<double?>("Altitud")
                        .IsRequired()
                        .HasColumnType("double precision");

                    b.Property<string>("Direc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Latitud")
                        .IsRequired()
                        .HasColumnType("double precision");

                    b.Property<bool>("Predeterminado")
                        .HasColumnType("boolean");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("direcciones", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.EstadoPedidos.EstadoPedido", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<int?>("EstadoId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaEstado")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("PedidoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.HasIndex("PedidoId");

                    b.ToTable("estados_pedidos", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Opiniones.Opinion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Comentario")
                        .HasColumnType("text");

                    b.Property<Guid?>("PedidoId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Puntaje")
                        .HasColumnType("integer");

                    b.Property<int?>("TipoId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("TipoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("opiniones", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Pagos.Pago", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<int?>("EstadoPagoId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaPago")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("MetodoPagoId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PedidoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EstadoPagoId");

                    b.HasIndex("MetodoPagoId");

                    b.HasIndex("PedidoId")
                        .IsUnique();

                    b.ToTable("pagos", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Parametros.Parametro", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Abreviatura")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<int?>("Dependencia")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int?>("Nivel")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Valor")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.HasKey("Id");

                    b.HasIndex("Dependencia");

                    b.ToTable("parametros", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Nivel = 0,
                            Nombre = "PROVEEDOR OAUTH2"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Dependencia = 1,
                            Nivel = 1,
                            Nombre = "google",
                            Valor = "1"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Dependencia = 1,
                            Nivel = 1,
                            Nombre = "facebook",
                            Valor = "2"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            Dependencia = 1,
                            Nivel = 1,
                            Nombre = "instagram",
                            Valor = "3"
                        },
                        new
                        {
                            Id = 10,
                            Activo = true,
                            Nivel = 0,
                            Nombre = "METODO DE PAGO"
                        },
                        new
                        {
                            Id = 11,
                            Activo = true,
                            Dependencia = 10,
                            Nivel = 1,
                            Nombre = "efectivo",
                            Valor = "1"
                        },
                        new
                        {
                            Id = 12,
                            Activo = true,
                            Dependencia = 10,
                            Nivel = 1,
                            Nombre = "tarjeta",
                            Valor = "2"
                        },
                        new
                        {
                            Id = 20,
                            Activo = true,
                            Nivel = 0,
                            Nombre = "ESTADO DE PEDIDO"
                        },
                        new
                        {
                            Id = 21,
                            Activo = true,
                            Dependencia = 20,
                            Nivel = 1,
                            Nombre = "recibido",
                            Valor = "1"
                        },
                        new
                        {
                            Id = 22,
                            Activo = true,
                            Dependencia = 20,
                            Nivel = 1,
                            Nombre = "preparando",
                            Valor = "2"
                        },
                        new
                        {
                            Id = 23,
                            Activo = true,
                            Dependencia = 20,
                            Nivel = 1,
                            Nombre = "en camino",
                            Valor = "3"
                        },
                        new
                        {
                            Id = 24,
                            Activo = true,
                            Dependencia = 20,
                            Nivel = 1,
                            Nombre = "entregado",
                            Valor = "4"
                        },
                        new
                        {
                            Id = 30,
                            Activo = true,
                            Nivel = 0,
                            Nombre = "ESTADO DE PAGO"
                        },
                        new
                        {
                            Id = 31,
                            Activo = true,
                            Dependencia = 30,
                            Nivel = 1,
                            Nombre = "pendiente",
                            Valor = "1"
                        },
                        new
                        {
                            Id = 32,
                            Activo = true,
                            Dependencia = 30,
                            Nivel = 1,
                            Nombre = "completado",
                            Valor = "2"
                        },
                        new
                        {
                            Id = 33,
                            Activo = true,
                            Dependencia = 30,
                            Nivel = 1,
                            Nombre = "fallido",
                            Valor = "3"
                        },
                        new
                        {
                            Id = 40,
                            Activo = true,
                            Nivel = 0,
                            Nombre = "VEHICULO"
                        },
                        new
                        {
                            Id = 41,
                            Activo = true,
                            Dependencia = 40,
                            Nivel = 1,
                            Nombre = "moto",
                            Valor = "1"
                        },
                        new
                        {
                            Id = 42,
                            Activo = true,
                            Dependencia = 40,
                            Nivel = 1,
                            Nombre = "carro",
                            Valor = "2"
                        },
                        new
                        {
                            Id = 43,
                            Activo = true,
                            Dependencia = 40,
                            Nivel = 1,
                            Nombre = "bicicleta",
                            Valor = "3"
                        },
                        new
                        {
                            Id = 50,
                            Activo = true,
                            Nivel = 0,
                            Nombre = "TIPO"
                        },
                        new
                        {
                            Id = 51,
                            Activo = true,
                            Dependencia = 50,
                            Nivel = 1,
                            Nombre = "restaurante",
                            Valor = "1"
                        },
                        new
                        {
                            Id = 52,
                            Activo = true,
                            Dependencia = 50,
                            Nivel = 1,
                            Nombre = "repartidor",
                            Valor = "2"
                        },
                        new
                        {
                            Id = 60,
                            Activo = true,
                            Nivel = 0,
                            Nombre = "Categorias"
                        },
                        new
                        {
                            Id = 61,
                            Activo = true,
                            Dependencia = 60,
                            Nivel = 1,
                            Nombre = "Comida rápida",
                            Valor = "1"
                        },
                        new
                        {
                            Id = 62,
                            Activo = true,
                            Dependencia = 60,
                            Nivel = 1,
                            Nombre = "Desayunos",
                            Valor = "2"
                        },
                        new
                        {
                            Id = 63,
                            Activo = true,
                            Dependencia = 60,
                            Nivel = 1,
                            Nombre = "Almuerzos",
                            Valor = "3"
                        },
                        new
                        {
                            Id = 64,
                            Activo = true,
                            Dependencia = 60,
                            Nivel = 1,
                            Nombre = "Cenas",
                            Valor = "4"
                        },
                        new
                        {
                            Id = 65,
                            Activo = true,
                            Dependencia = 60,
                            Nivel = 1,
                            Nombre = "Postres",
                            Valor = "5"
                        },
                        new
                        {
                            Id = 66,
                            Activo = true,
                            Dependencia = 60,
                            Nivel = 1,
                            Nombre = "Bebidas",
                            Valor = "6"
                        },
                        new
                        {
                            Id = 67,
                            Activo = true,
                            Dependencia = 60,
                            Nivel = 1,
                            Nombre = "Saludable",
                            Valor = "7"
                        },
                        new
                        {
                            Id = 68,
                            Activo = true,
                            Dependencia = 60,
                            Nivel = 1,
                            Nombre = "Vegetariana",
                            Valor = "8"
                        },
                        new
                        {
                            Id = 69,
                            Activo = true,
                            Dependencia = 60,
                            Nivel = 1,
                            Nombre = "Japonesa",
                            Valor = "9"
                        },
                        new
                        {
                            Id = 70,
                            Activo = true,
                            Dependencia = 60,
                            Nivel = 1,
                            Nombre = "Italiana",
                            Valor = "10"
                        });
                });

            modelBuilder.Entity("Delivery.Domain.PedidoAsignados.PedidoAsignado", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("FechaAsignacion")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("PedidoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RepartidorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("RepartidorId");

                    b.ToTable("producto_asignados", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Pedidos.Pedido", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("DireccionId")
                        .HasColumnType("uuid");

                    b.Property<int?>("EstadoId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaPedido")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("MetodoPagoId")
                        .HasColumnType("integer");

                    b.Property<double?>("Total")
                        .IsRequired()
                        .HasColumnType("double precision");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DireccionId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("MetodoPagoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("pedidos", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.ProductoCategorias.ProductoCategoria", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ProductoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("ProductoId");

                    b.ToTable("producto_categoria", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Productos.Producto", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("integer");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagenUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Precio")
                        .IsRequired()
                        .HasColumnType("double precision");

                    b.Property<Guid?>("RestauranteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("RestauranteId");

                    b.ToTable("productos", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Repartidores.Repartidor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Placa")
                        .HasColumnType("text");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uuid");

                    b.Property<int?>("VehiculoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.HasIndex("VehiculoId");

                    b.ToTable("repartidores", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Restaurantes.Restaurante", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TiempoEntrega")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("restaurantes", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Roles.Rol", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.UsuarioRoles.UsuarioRol", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("RolId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("usuario_roles", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.Usuarios.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Apellidos")
                        .HasColumnType("text");

                    b.Property<string>("Celular")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Dni")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsDefaultPassword")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombres")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Correo")
                        .IsUnique();

                    b.HasIndex("Dni")
                        .IsUnique();

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("Delivery.Domain.DetallePedidos.DetallePedido", b =>
                {
                    b.HasOne("Delivery.Domain.Pedidos.Pedido", "Pedido")
                        .WithMany("DetallePedidos")
                        .HasForeignKey("PedidoId");

                    b.HasOne("Delivery.Domain.Productos.Producto", "Producto")
                        .WithMany("DetallePedidos")
                        .HasForeignKey("ProductoId");

                    b.Navigation("Pedido");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Delivery.Domain.Direcciones.Direccion", b =>
                {
                    b.HasOne("Delivery.Domain.Usuarios.Usuario", "Usuario")
                        .WithMany("Direccion")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Delivery.Domain.EstadoPedidos.EstadoPedido", b =>
                {
                    b.HasOne("Delivery.Domain.Parametros.Parametro", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId");

                    b.HasOne("Delivery.Domain.Pedidos.Pedido", "Pedido")
                        .WithMany("EstadoPedidos")
                        .HasForeignKey("PedidoId");

                    b.Navigation("Estado");

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("Delivery.Domain.Opiniones.Opinion", b =>
                {
                    b.HasOne("Delivery.Domain.Pedidos.Pedido", "Pedido")
                        .WithMany("Opinion")
                        .HasForeignKey("PedidoId");

                    b.HasOne("Delivery.Domain.Parametros.Parametro", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId");

                    b.HasOne("Delivery.Domain.Usuarios.Usuario", "Usuario")
                        .WithMany("Opinion")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Pedido");

                    b.Navigation("Tipo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Delivery.Domain.Pagos.Pago", b =>
                {
                    b.HasOne("Delivery.Domain.Parametros.Parametro", "EstadoPago")
                        .WithMany()
                        .HasForeignKey("EstadoPagoId");

                    b.HasOne("Delivery.Domain.Parametros.Parametro", "MetodoPago")
                        .WithMany()
                        .HasForeignKey("MetodoPagoId");

                    b.HasOne("Delivery.Domain.Pedidos.Pedido", "Pedido")
                        .WithOne("Pago")
                        .HasForeignKey("Delivery.Domain.Pagos.Pago", "PedidoId");

                    b.Navigation("EstadoPago");

                    b.Navigation("MetodoPago");

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("Delivery.Domain.Parametros.Parametro", b =>
                {
                    b.HasOne("Delivery.Domain.Parametros.Parametro", null)
                        .WithMany()
                        .HasForeignKey("Dependencia");
                });

            modelBuilder.Entity("Delivery.Domain.PedidoAsignados.PedidoAsignado", b =>
                {
                    b.HasOne("Delivery.Domain.Pedidos.Pedido", "Pedido")
                        .WithMany("PedidoAsignado")
                        .HasForeignKey("PedidoId");

                    b.HasOne("Delivery.Domain.Repartidores.Repartidor", "Repartidor")
                        .WithMany("PedidoAsignado")
                        .HasForeignKey("RepartidorId");

                    b.Navigation("Pedido");

                    b.Navigation("Repartidor");
                });

            modelBuilder.Entity("Delivery.Domain.Pedidos.Pedido", b =>
                {
                    b.HasOne("Delivery.Domain.Direcciones.Direccion", "Direccion")
                        .WithMany("Pedido")
                        .HasForeignKey("DireccionId");

                    b.HasOne("Delivery.Domain.Parametros.Parametro", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId");

                    b.HasOne("Delivery.Domain.Parametros.Parametro", "MetodoPago")
                        .WithMany()
                        .HasForeignKey("MetodoPagoId");

                    b.HasOne("Delivery.Domain.Usuarios.Usuario", "Usuario")
                        .WithMany("Pedido")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Direccion");

                    b.Navigation("Estado");

                    b.Navigation("MetodoPago");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Delivery.Domain.ProductoCategorias.ProductoCategoria", b =>
                {
                    b.HasOne("Delivery.Domain.Parametros.Parametro", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId");

                    b.HasOne("Delivery.Domain.Productos.Producto", "Producto")
                        .WithMany("ProductoCategoria")
                        .HasForeignKey("ProductoId");

                    b.Navigation("Categoria");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Delivery.Domain.Productos.Producto", b =>
                {
                    b.HasOne("Delivery.Domain.Parametros.Parametro", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId");

                    b.HasOne("Delivery.Domain.Restaurantes.Restaurante", "Restaurante")
                        .WithMany("Producto")
                        .HasForeignKey("RestauranteId");

                    b.Navigation("Categoria");

                    b.Navigation("Restaurante");
                });

            modelBuilder.Entity("Delivery.Domain.Repartidores.Repartidor", b =>
                {
                    b.HasOne("Delivery.Domain.Usuarios.Usuario", "Usuario")
                        .WithOne("Repartidor")
                        .HasForeignKey("Delivery.Domain.Repartidores.Repartidor", "UsuarioId");

                    b.HasOne("Delivery.Domain.Parametros.Parametro", "Vehiculo")
                        .WithMany()
                        .HasForeignKey("VehiculoId");

                    b.Navigation("Usuario");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("Delivery.Domain.UsuarioRoles.UsuarioRol", b =>
                {
                    b.HasOne("Delivery.Domain.Roles.Rol", "Rol")
                        .WithMany("UsuarioRols")
                        .HasForeignKey("RolId");

                    b.HasOne("Delivery.Domain.Usuarios.Usuario", "Usuario")
                        .WithMany("usuarioRols")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Delivery.Domain.Direcciones.Direccion", b =>
                {
                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("Delivery.Domain.Pedidos.Pedido", b =>
                {
                    b.Navigation("DetallePedidos");

                    b.Navigation("EstadoPedidos");

                    b.Navigation("Opinion");

                    b.Navigation("Pago");

                    b.Navigation("PedidoAsignado");
                });

            modelBuilder.Entity("Delivery.Domain.Productos.Producto", b =>
                {
                    b.Navigation("DetallePedidos");

                    b.Navigation("ProductoCategoria");
                });

            modelBuilder.Entity("Delivery.Domain.Repartidores.Repartidor", b =>
                {
                    b.Navigation("PedidoAsignado");
                });

            modelBuilder.Entity("Delivery.Domain.Restaurantes.Restaurante", b =>
                {
                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Delivery.Domain.Roles.Rol", b =>
                {
                    b.Navigation("UsuarioRols");
                });

            modelBuilder.Entity("Delivery.Domain.Usuarios.Usuario", b =>
                {
                    b.Navigation("Direccion");

                    b.Navigation("Opinion");

                    b.Navigation("Pedido");

                    b.Navigation("Repartidor");

                    b.Navigation("usuarioRols");
                });
#pragma warning restore 612, 618
        }
    }
}
